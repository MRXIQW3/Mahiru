import customtkinter as ctk
from tkinter import messagebox
import os
import datetime
import pytz
import webbrowser
import subprocess
import platform
from tkcalendar import Calendar
import shutil


# –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å winshell: pip install winshell
try:
    import winshell
except ImportError:
    winshell = None

ctk.set_appearance_mode("white")
ctk.set_default_color_theme("blue")

class AssistantApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("NeoPC Assistant")
        self.geometry("900x600")

        self.current_frame = None

        # –í–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é
        self.menu_frame = ctk.CTkFrame(self)
        self.menu_frame.pack(side="top", fill="x", pady=5)

        self.content_frame = ctk.CTkFrame(self)
        self.content_frame.pack(expand=True, fill="both")

        buttons = [
            ("–ò–≥—Ä—ã", self.show_games),
            ("–û—Ç–¥—ã—Ö", self.show_entertainment),
            ("–†–∞–±–æ—Ç–∞", self.show_work),
            ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", self.show_system),
            ("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", self.show_apps),
            ("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –í—Ä–µ–º—è", self.show_calendar_time),
            ("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self.show_about),

        ]

        for name, command in buttons:
            btn = ctk.CTkButton(self.menu_frame, text=name, command=command)
            btn.pack(side="left", padx=5)

        self.show_games()  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª

    def clear_content(self):
        if self.current_frame:
            self.current_frame.destroy()

    def show_games(self):
        self.clear_content()
        self.current_frame = ctk.CTkFrame(self.content_frame)
        self.current_frame.pack(expand=True, fill="both")

        ctk.CTkLabel(self.current_frame, text="üéÆ –ò–≥—Ä—ã", font=("Arial", 18)).pack(pady=10)

        ctk.CTkButton(self.current_frame, text="Steam", command=self.run_steam).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="Phasmophobia", command=lambda: self.run_steam_game("739630")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="Terraria", command=lambda: self.run_steam_game("105600")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="Skyrim", command=lambda: self.run_steam_game("72850")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="Lost Light", command=lambda: self.run_steam_game("1894920")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="TLauncher (Minecraft)", command=self.run_tlauncher).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="Telegram", command=lambda: webbrowser.open("https://web.telegram.org")).pack(pady=5)

    def show_entertainment(self):
        self.clear_content()
        self.current_frame = ctk.CTkFrame(self.content_frame)
        self.current_frame.pack(expand=True, fill="both")

        ctk.CTkLabel(self.current_frame, text="üéÆ –û—Ç–¥—ã—Ö", font=("Arial", 18)).pack(pady=10)

        ctk.CTkButton(self.current_frame, text="YouTube", command=lambda: webbrowser.open("https://youtube.com")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="Jut.su (–∞–Ω–∏–º–µ)", command=lambda: webbrowser.open("https://jut.su")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="ReManga", command=lambda: webbrowser.open("https://remanga.org")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="–ù–æ–≤–µ–ª–ª–∞ '–¢–µ–Ω–µ–≤–æ–π —Ä–∞–±'", command=lambda: webbrowser.open("https://ranobelib.me/ru/book/122448--shadow-slave")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="Spotify", command=lambda: webbrowser.open("https://open.spotify.com")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="Telegram", command=lambda: webbrowser.open("https://web.telegram.org")).pack(pady=5)

    def show_work(self):
        self.clear_content()
        self.current_frame = ctk.CTkFrame(self.content_frame)
        self.current_frame.pack(expand=True, fill="both")

        ctk.CTkLabel(self.current_frame, text="üíº –†–∞–±–æ—Ç–∞", font=("Arial", 18)).pack(pady=10)

        ctk.CTkButton(self.current_frame, text="Visual Studio Code", command=self.run_vscode).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="Godot", command=self.run_godot).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="OBS Studio", command=self.run_obs).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", command=self.create_folder_prompt).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª", command=self.create_file_prompt).pack(pady=5)

    def show_system(self):
        self.clear_content()
        self.current_frame = ctk.CTkFrame(self.content_frame)
        self.current_frame.pack(expand=True, fill="both")

        ctk.CTkLabel(self.current_frame, text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", font=("Arial", 18)).pack(pady=10)

        ctk.CTkButton(self.current_frame, text="–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö", command=self.confirm_shutdown).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö", command=self.confirm_restart).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="–°–ø—è—â–∏–π —Ä–µ–∂–∏–º", command=lambda: os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="–û—Ç–∫—Ä—ã—Ç—å CMD", command=self.open_cmd).pack(pady=5)
        if winshell:
            ctk.CTkButton(self.current_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", command=self.clear_recycle_bin).pack(pady=5)

    def show_apps(self):
        self.clear_content()
        self.current_frame = ctk.CTkFrame(self.content_frame)
        self.current_frame.pack(expand=True, fill="both")

        ctk.CTkLabel(self.current_frame, text="üì¶ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", font=("Arial", 18)).pack(pady=10)

        ctk.CTkButton(self.current_frame, text="Radmin VPN", command=self.run_radmin).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="Opera", command=lambda: os.startfile("C:\\Users\\Public\\Opera\\launcher.exe")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="–°hrom", command=lambda: os.startfile(r"C:\Program Files\Google\Chrome\Application\chrome.exe")).pack(pady=5)
        ctk.CTkButton(self.current_frame, text="–ö–æ—Ä–∑–∏–Ω–∞", command=lambda: os.startfile("shell:RecycleBinFolder")).pack(pady=5)

    def show_about(self):
        self.clear_content()
        self.current_frame = ctk.CTkFrame(self.content_frame)
        self.current_frame.pack(expand=True, fill="both")

        ctk.CTkLabel(self.current_frame, text="üß¨ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", font=("Arial", 18)).pack(pady=10)
        ctk.CTkLabel(self.current_frame, text="NeoPC Assistant\n–ê–≤—Ç–æ—Ä: MRXIQW3 üòÑ\n–í–µ—Ä—Å–∏—è: 1.1", font=("Arial", 14)).pack(pady=20)

    def run_steam(self):
        try:
            os.startfile("steam://open")
        except:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Steam.")

    def run_steam_game(self, app_id):
        try:
            os.startfile(f"steam://run/{app_id}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É.\n{e}")

    def run_tlauncher(self):
        version_dir = r"C:\Users\pojkh\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\Mahiru 2.0\TLauncher\.minecraft_versions"
        mods_dir = r"C:\Users\pojkh\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\Mahiru 2.0\TLauncher\.minecraft_modpacks"
        maps_dir = r"C:\Users\pojkh\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\Mahiru 2.0\TLauncher\.minecraft_maps"  # –ù–û–í–ê–Ø –ü–ê–ü–ö–ê –° –ö–ê–†–¢–ê–ú–ò

        minecraft_dir = r"C:\Users\pojkh\AppData\Roaming\.minecraft"
        tlauncher_path = os.path.join(minecraft_dir, "TLauncher.exe")

        if not os.path.exists(tlauncher_path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "TLauncher –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        dialog = ctk.CTkToplevel(self)

        dialog.lift()

        dialog.attributes('-topmost', True)

        dialog.title("–í—ã–±–æ—Ä —Å–±–æ—Ä–∫–∏")
        dialog.geometry("400x450")

        ctk.CTkLabel(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é Minecraft").pack(pady=5)
        version_combobox = ctk.CTkComboBox(dialog, values=os.listdir(version_dir))
        version_combobox.pack(pady=5)

        ctk.CTkLabel(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–ø–∞–∫").pack(pady=5)
        mods_combobox = ctk.CTkComboBox(dialog, values=os.listdir(mods_dir))
        mods_combobox.pack(pady=5)

        ctk.CTkLabel(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É").pack(pady=5)
        maps_combobox = ctk.CTkComboBox(dialog, values=["–ù–µ—Ç"] + os.listdir(maps_dir))
        maps_combobox.pack(pady=5)


    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ TLauncher
        def launch():
            selected_version = version_combobox.get()
            selected_mods = mods_combobox.get()
            selected_map = maps_combobox.get()

         # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤–µ—Ä—Å–∏–∏
            version_path = os.path.join(version_dir, selected_version)
            if os.path.exists(version_path):
                shutil.copytree(version_path, minecraft_dir, dirs_exist_ok=True)

        # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥—ã
            mods_path = os.path.join(mods_dir, selected_mods)
            mods_target = os.path.join(minecraft_dir, "mods")
            if os.path.exists(mods_target):
                shutil.rmtree(mods_target)

            if os.path.exists(mods_path):
                shutil.copytree(mods_path, mods_target)

        # –ö–æ–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
            if selected_map != "–ù–µ—Ç":
                saves_dir = os.path.join(minecraft_dir, "saves")
                map_source = os.path.join(maps_dir, selected_map)
                map_target = os.path.join(saves_dir, selected_map)

                if os.path.exists(map_target):
                    shutil.rmtree(map_target)

                if os.path.exists(map_source):
                    shutil.copytree(map_source, map_target)

            os.startfile(tlauncher_path)
            dialog.destroy()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã
        def apply_map_only():
            selected_map = maps_combobox.get()
            if selected_map != "–ù–µ—Ç":
                saves_dir = os.path.join(minecraft_dir, "saves")
                map_source = os.path.join(maps_dir, selected_map)
                map_target = os.path.join(saves_dir, selected_map)

                if os.path.exists(map_target):
                    shutil.rmtree(map_target)

                if os.path.exists(map_source):
                    shutil.copytree(map_source, map_target)

                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ö–∞—Ä—Ç–∞ '{selected_map}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")

        # –ö–Ω–æ–ø–∫–∏
        ctk.CTkButton(dialog, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å TLauncher", command=launch).pack(pady=10)
        ctk.CTkButton(dialog, text="–î–æ–±–∞–≤–∏—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞", command=apply_map_only).pack(pady=10)



    def run_vscode(self):
        try:
            subprocess.Popen(["code"])
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"VS Code –Ω–µ –Ω–∞–π–¥–µ–Ω.\n{e}")

    def run_godot(self):
        path = "C:\\Godot\\Godot.exe"
        if os.path.exists(path):
            os.startfile(path)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "Godot –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    def run_obs(self):
        path = "C:\\Program Files\\obs-studio\\bin\\64bit\\obs64.exe"
        if os.path.exists(path):
            os.startfile(path)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "OBS Studio –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    def run_radmin(self):
        path = "C:\\Program Files (x86)\\Radmin VPN\\RadminVPN.exe"
        if os.path.exists(path):
            os.startfile(path)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "Radmin VPN –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    def confirm_shutdown(self):
        if messagebox.askyesno("–í—ã–∫–ª—é—á–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?"):
            self.shutdown_pc()


    def shutdown_pc(self):
        system = platform.system()
        if system == "Windows":
            os.system("shutdown /s /t 1")
        elif system == "Linux" or system == "Darwin":
            os.system("shutdown now")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.")

    def confirm_restart(self):
        if messagebox.askyesno("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?"):
            os.system("shutdown /r /t 0")

    def create_folder_prompt(self):
        popup = ctk.CTkInputDialog(title="–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏", text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏:")
        folder_name = popup.get_input()
        if folder_name:
            try:
                os.makedirs(folder_name, exist_ok=True)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–∞–ø–∫–∞ '{folder_name}' —Å–æ–∑–¥–∞–Ω–∞.")
                os.startfile(folder_name)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

    def create_file_prompt(self):
        popup = ctk.CTkInputDialog(title="–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º):")
        file_name = popup.get_input()
        if file_name:
            try:
                with open(file_name, "w", encoding="utf-8") as f:
                    f.write("")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª '{file_name}' —Å–æ–∑–¥–∞–Ω.")
                os.startfile(file_name)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

    def open_cmd(self):
        subprocess.Popen("cmd")

    def clear_recycle_bin(self):
        try:
            winshell.recycle_bin().empty(confirm=False, show_progress=False, sound=True)
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

    def show_calendar_time(self):
        self.clear_content()
        self.current_frame = ctk.CTkFrame(self.content_frame)
        self.current_frame.pack(expand=True, fill="both")

        ctk.CTkLabel(self.current_frame, text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ üåç –í—Ä–µ–º—è", font=("Arial", 18)).pack(pady=10)

        cal = Calendar(self.current_frame, selectmode='day')
        cal.pack(pady=10)

        time_zone_label = ctk.CTkLabel(self.current_frame, text="–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –º–∏—Ä—É:", font=("Arial", 14))
        time_zone_label.pack(pady=5)

        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.time_display = ctk.CTkLabel(self.current_frame, text="", font=("Arial", 14))
        self.time_display.pack(padx=10, pady=5)

        self.update_world_time()

    def update_world_time(self):
        zones = ["Europe/Moscow", "UTC", "America/New_York", "Asia/Tokyo", "Australia/Sydney"]
        now = datetime.datetime.now()
        
        time_str = ""
        for zone in zones:
            tz = pytz.timezone(zone)
            zone_time = now.astimezone(tz)
            time_str += f"{zone}: {zone_time.strftime('%Y-%m-%d %H:%M:%S')}\n"

        self.time_display.configure(text=time_str)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        self.after(60000, self.update_world_time)  # –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥


if __name__ == "__main__":
    app = AssistantApp()
    app.mainloop()